import Head from "next/head";
import { useState , useEffect } from "react";
import { Transition } from "@headlessui/react";
import { useCookies } from 'react-cookie';
import Router from 'next/router';

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [showSuccessNotification, setShowSuccessNotification] = useState(false);
  const [showErrorNotification, setShowErrorNotification] = useState(false);
  const [showCooldownNotification, setShowCooldownNotification] = useState(false);
  const [remainingAttempts, setRemainingAttempts] = useState(3);
  const [cooldownTimer, setCooldownTimer] = useState(0);
  const [cookies, setCookie] = useCookies(['user','remember',"role"]);
  const [rememberMe, setRememberMe] = useState(false);

  const handleCheckboxChange = (event) => {
    setRememberMe(event.target.checked);
  };

  const rotation  =async () => {
    if(cookies.role === "Student"){
      Router.push('/');
    }
    if(cookies.role === "Instructor"){
      Router.push('/instructor');
    }
    if(cookies.role === "Admin"){
      Router.push('/admin');
    }
  }
  const handleSubmit = async (event: { preventDefault: () => void }) => {
    event.preventDefault();
    const res = await fetch("http://localhost:8000/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        username: username,
        password: password,
      }),
    })
    const data = await res.json();
    console.log(data);  
    if (rememberMe){
      setCookie('remember', username, {
        path: '/',
        maxAge: 3600, // 1 hour
        sameSite: true,
      });
    }
    
    // Login logic here
    const loginSuccessful = data.status; // replace with actual login logic

    if (loginSuccessful) {
      setShowSuccessNotification(true);
      setShowErrorNotification(false);
      setRemainingAttempts(3);
      setCookie('user', username, {
        path: '/',
        maxAge: 3600, // 1 hour
        sameSite: true,
      });
      setCookie('role', data.user._role, {
        path: '/',
        maxAge: 3600, // 1 hour
        sameSite: true,
      });
     
      
    } 
    else {
      setRemainingAttempts((prevAttempts) => prevAttempts - 1);
      if (remainingAttempts <= 1) {
        setShowCooldownNotification(true);
        setCooldownTimer(10);
        setRemainingAttempts(3);
      } else {
        setShowErrorNotification(true);
        setShowSuccessNotification(false);
      }
    }

  };
  const handleCloseSuccessNotification = () => {
    setShowSuccessNotification(false);
  };

  const handleCloseErrorNotification = () => {
    setShowErrorNotification(false);
  };

  const handleCloseCooldownNotification = () => {
    setShowCooldownNotification(false);
    setRemainingAttempts(3);
    setCooldownTimer(0);
  };

  useEffect(() => {
    let cooldownInterval = null;
    if (showCooldownNotification) {
      cooldownInterval = setInterval(() => {
        setCooldownTimer((prevTimer) => prevTimer - 1);
      }, 1000);
    }
    return () => clearInterval(cooldownInterval);
  }, [showCooldownNotification]);

  useEffect(() => {
    if (cooldownTimer <= 0) {
      setShowCooldownNotification(false);
      setRemainingAttempts(3);
    }
  }, [cooldownTimer]);

  useEffect(()=>{
    if (cookies.remember) {
      setUsername(cookies.remember)
    }
    rotation()
  })
  return (
    <>
      <Head>
        <title>Udemy Login Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <Transition
        show={showSuccessNotification}
        enter="transition-opacity duration-500"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition-opacity duration-500"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        <div className="bg-green-500 text-white px-4 py-2 rounded-md absolute top-20 right-5">
          Login successful!{" "}
          <button className="text-white ml-2" onClick={handleCloseSuccessNotification}>
            <svg
              className="w-4 h-4 inline-block"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>
      </Transition>
      <Transition
        show={showErrorNotification}
        enter="transition-opacity duration-500"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition-opacity duration-500"
        leaveFrom="opacity-100"
        leaveTo ="opacity-0"
        >
          <div className="bg-red-500 text-white px-4 py-2 rounded-md absolute top-20 right-5">
            Login failed. {remainingAttempts} attempts left{" "}
            <button className="text-white ml-2" onClick={handleCloseErrorNotification}>
              <svg
                className="w-4 h-4 inline-block"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
        </Transition>
        <Transition
          show={showCooldownNotification}
          enter="transition-opacity duration-500"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="transition-opacity duration-500"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="bg-yellow-500 text-white px-4 py-2 rounded-md absolute top-20 right-5">
            Login failed. You have exceeded the maximum number of attempts. Please wait for {cooldownTimer} seconds{" "}
            <button className="text-white ml-2" onClick={handleCloseCooldownNotification}>
              <svg
                className="w-4 h-4 inline-block"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
        </Transition>

        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>

                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700"
                >
                  Username
                </label>
                <div className="mt-1">
                  <input
                    id="username"
                    name="username"
                    type="text"
                    required
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    value={username}
                    onChange={(event) => setUsername(event.target.value)}
                  />
                </div>
              </div>

              <div>
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-gray-700"
                >
                  Password
                </label>
                <div className="mt-1">
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    value={password}
                    onChange={(event) => setPassword(event.target.value)}
                  />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={rememberMe} onChange={handleCheckboxChange}
                  />
                  <label
                    htmlFor="remember-me"
                    className="ml-2 block text-sm text-gray-900"
                  >
                    Remember me
                  </label>
                </div>

                <div className="text-sm">
                  <a
                    href="#"
                    className="font-medium text-blue-600 hover:text-blue-500"
                  >
                    Forgot your password?
                  </a>
                </div>
              </div>

              <div>
                <button
                  type="submit"
                  className={`${showCooldownNotification ? "hidden" : ""} w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
                >
                  Sign in
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
};

export default Login;
